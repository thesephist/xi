#!/usr/bin/env oak

// Xi is a minimal concatenative stack programming language that uses Oak types
// and semantics.

{
	println: println
	slice: slice
	map: map
	each: each
	filter: filter
	reduce: reduce
	flatten: flatten
	every: every
	partition: partition
	entries: entries
	loop: loop
} := import('std')
{
	digit?: digit?
	join: join
	split: split
	trim: trim
} := import('str')
{
	sort!: sort!
} := import('sort')
{
	printf: printf
} := import('fmt')
fs := import('fs')
cli := import('cli')

// Stack implements a simple LIFO stack to be used as the data stack for Xi
// programs. It also implements a peek() operation to look at the topmost item
// on the stack.
fn Stack {
	// buffer backing the stack
	mem := []
	// index points to the next insertion slot
	index := 0

	fn pop if index {
		0 -> ?
		_ -> {
			index <- index - 1
			mem.(index)
		}
	}
	fn push(it) {
		mem.(index) := it
		index <- index + 1
	}
	fn peek if index {
		0 -> ?
		_ -> mem.(index - 1)
	}

	{
		pop: pop
		push: push
		peek: peek
		clear: fn() index <- 0
		items: fn() mem |> slice(0, index)
	}
}

// tokenize splits a line of Xi program into valid tokens, which are
// punctuations separated by space or string literals or numbers/booleans.
// Returns a list of strings.
fn tokenize(program) program |> split('\'') |> map(fn(part, i) if i % 2 {
	// odd items are string content
	1 -> ['\'' << part << '\'']
	// even items are normal tokens
	_ -> part |> split(' ')
}) |> flatten() |> with filter() fn(s) s |> trim() != ''

// parse translates a line of Xi program into "AST nodes" which are really just
// nested lists of strings. It accounts for nesting in quotations ( ), lists, [
// ], and objects { }.
// For example, it converts 'xyz ( 1 2 ) abc' -> ['xyz', ['1', '2'], 'abc']
//
// parse produces special composite literal nodes to represent lists and
// objects, that have the form:
// {
//   type: :list (or :object)
//   val: <Oak value, list or object>
// }
fn parse(program) {
	index := 0
	tokens := program |> tokenize()

	fn parseTokens(stmts) if index >= len(tokens) {
		true -> stmts
		_ -> if token := tokens.(index) {
			'(' -> {
				index <- index + 1
				parseTokens(stmts << parseTokens([]))
			}
			'[' -> {
				index <- index + 1
				parseTokens(stmts << {
					type: :list
					val: parseTokens([])
				})
			}
			'{' -> {
				index <- index + 1
				parseTokens(stmts << {
					type: :object
					val: {
						obj := {}
						parseTokens([]) |> partition(2) |> with each() fn(pair) {
							[key, val] := pair
							obj.(key) := val
						}
						obj
					}
				})
			}
			']', '}', ')' -> {
				index <- index + 1
				stmts
			}
			_ -> {
				index <- index + 1
				parseTokens(stmts << token)
			}
		}
	}
	parseTokens([])
}

// toString converts Xi values to string representations suitable for printing
// in a REPL environment.
fn toString(word) if type(word) {
	:list -> '( ' + word |> map(toString) |> join(' ') + ' )'
	:object -> if word {
		{ type: :list, val: _ } -> '[ ' + word.val |> map(toString) |> join(' ') + ' ]'
		{ type: :object, val: _ } -> '{ ' + word.val |>
			entries() |>
			map(fn(entry) toString(entry.key) << ' ' << toString(entry.val)) |>
			join(' ') + ' }'
	}
	:int, :float -> string(word)
	:string -> '\'' + word + '\''
	_ -> string(word)
}

// number? reports whether a string is a valid Oak (and Xi) number
fn number?(s) float(s) != ?
// str? reports whether a string is a valid Xi string literal. Note that Xi
// string literals are pretty dumb -- you can't escape quotes, for example.
fn str?(s) s.0 = '\'' & s.(len(s) - 1) = '\''

// literal? reports whether a parsed word represents a Xi value literal
fn literal?(word) if {
	word = ? -> false

	type(word) = :list
	word = { type: _, val: _ }
	number?(word)
	str?(word)
	word = 'true'
	word = 'false' -> true

	_ -> false
}

// literal translates a Xi literal token into a Xi value
fn literal(word) if {
	type(word) = :list -> word
	word = { type: :list, val: _ } -> {
		type: :list
		val: word.val |> map(literal)
	}
	word = { type: :object, val: _ } -> {
		type: :object
		val: word.val |> entries() |> with reduce({}) fn(o, entry) {
			[key, val] := entry
			o.(literal(key)) := literal(val)
		}
	}
	number?(word) -> float(word)
	str?(word) -> word |> slice(1, len(word) - 1)
	word = 'true' -> true
	word = 'false' -> false
}

// eval evaluates a list of words (a line of Xi program) against a stack and a
// scope. The stack is used as the data stack, and the scope is used to store
// user-defined words. eval does not return anything meaningful, and instead
// mutates the stack.
fn eval(words, stack, scope) if {
	// comment
	words.0 = '//' -> ?
	// define a new word
	words.1 = ':' -> scope.(words.0) := words |> slice(2)
	// evaluate a statement
	_ -> words |> with each() fn(word) if word {
		// introspection
		'.' -> println(stack.pop() |> toString())
		// .s for stack, following the Factor convention
		'.s' -> println('< ' + stack.items() |> map(toString) |> join(' ') + ' >')
		// .e for environment, for the local lexical environment
		'.e' -> println('{\n' + scope |> entries() |> sort!(fn(pair) pair.0) |> map(fn(pair) {
			[key, val] := pair
			'  ' << key << ' : ' << toString(val)
		}) |> join('\n') + '\n}')

		// stack manipulation
		'dup' -> stack.push(stack.peek())
		'dip' -> {
			defn := stack.pop()
			dipped := stack.pop()
			defn |> eval(stack, scope)
			stack.push(dipped)
		}
		'drop' -> stack.pop()
		'swap' -> {
			a := stack.pop()
			b := stack.pop()
			stack.push(a)
			stack.push(b)
		}
		'clear' -> stack.clear()

		// operators
		'+' -> stack.push({
			tmp := stack.pop()
			stack.pop() + tmp
		})
		'-' -> stack.push({
			tmp := stack.pop()
			stack.pop() - tmp
		})
		'*' -> stack.push({
			tmp := stack.pop()
			stack.pop() * tmp
		})
		'/' -> stack.push({
			tmp := stack.pop()
			stack.pop() / tmp
		})
		'%' -> stack.push({
			tmp := stack.pop()
			stack.pop() % tmp
		})
		'&' -> stack.push(stack.pop() & stack.pop())
		'|' -> stack.push(stack.pop() | stack.pop())
		'^' -> stack.push(stack.pop() ^ stack.pop())
		'=' -> stack.push(stack.pop() = stack.pop())
		'<' -> stack.push(stack.pop() > stack.pop())
		'>' -> stack.push(stack.pop() < stack.pop())
		'<=' -> stack.push(stack.pop() >= stack.pop())
		'>=' -> stack.push(stack.pop() <= stack.pop())
		'!' -> stack.push(!stack.pop())

		// primitives
		'?' -> {
			ifFalse := stack.pop()
			ifTrue := stack.pop()
			stack.push(if cond := stack.pop() {
				true -> ifTrue
				_ -> ifFalse
			})
		}
		'call' -> stack.pop() |> eval(stack, scope)
		// list and object functions
		'nth' -> {
			key := stack.pop()
			if target := stack.pop() {
				{ type: :list, val: _ } -> stack.push(target.val.(int(key)))
				{ type: :object, val: _ } -> stack.push(target.val.(key))
				_ -> {
					printf('Error: cannot access key {{0}} of {{1}}', key, target)
				}
			}
		}
		'nth!' -> {
			val := stack.pop()
			key := stack.pop()
			if target := stack.peek() {
				{ type: :list, val: _ } -> target.val.(int(key)) := val
				{ type: :object, val: _ } -> target.val.(key) := val
				_ -> {
					printf('Error: cannot access key {{0}} of {{1}}', key, target)
				}
			}
		}
		'len' -> if target := stack.pop() {
			{ type: _, val: _ } -> stack.push(float(len(target.val)))
			_ -> {
				printf('Error: cannot get len of {{0}}', target)
				stack.push(0)
			}
		}
		'print' -> if type(word := stack.pop()) {
			:string -> println(word)
			_ -> println(word |> toString())
		}

		// literals and definitions
		_ -> if literal?(word) {
			true -> literal(word) |> stack.push()
			_ -> if defn := scope.(word) {
				? -> printf('Error: unknown word "{{0}}"', word)
				_ -> defn |> eval(stack, scope)
			}
		}
	}
}

// main

scope := {}
stack := Stack()

// language prelude
//
// The prelude defines the "kernel" of Xi, the equivalent of Factor's
// kernel.factor. The stack effect of each definition is commented above each
// definition line.
[
	// arithmetic
	'++ : 1 +'
	'-- : 1 -'
	'neg : 0 swap -'
	'abs : dup 0 >= ( ) ( neg ) if'
	'zero? : 0 ='
	'even? : 2 % 0 ='
	'odd? : 2 % 1 ='
	'pos? : 0 >'
	'neg? : 0 <'
	'max : dup2 > ( drop ) ( nip ) if'
	'min : dup2 < ( drop ) ( nip ) if'
	// n factor -> bool
	'divisible? : % zero?'

	// stack shuffling
	'nip : swap drop'
	'nipd : ( nip ) dip'
	'dip2 : swap ( dip ) dip'
	'dip3 : swap ( dip2 ) dip'
	'dip4 : swap ( dip3 ) dip'
	'drop2 : drop drop'
	'drop3 : drop2 drop'
	// x y -> x x y
	'dupd : ( dup ) dip'
	// x y -> x y x y
	'dup2 : over over'
	// x y z -> x y z x y z
	'dup3 : pick pick pick'
	// x y z -> y x z
	'swapd : ( swap ) dip'
	// x y -> x y x
	'over : dupd swap'
	// x y z -> y z x
	'rot : swapd swap'
	// x y z -> z x y
	'-rot : swap swapd'
	// w x y z -> x y w z
	'rotd : ( rot ) dip'
	// w x y z -> y w x z
	'-rotd : ( -rot ) dip'
	// x y -> y x y
	'tuck : dup -rot'
	// x y z -> z y x
	'spin : -rot swap'
	// x y z -> x y z x
	'pick : rot dup ( -rot ) dip'
	// w x y z -> w x y w z
	'pickd : ( pick ) dip'
	// w x y z -> x y z w
	'rot4 : ( swap ) dip2 rot'
	// w x y z -> z w x y
	'-rot4 : -rot ( swap ) dip2'
	// w x y z -> w x y z w
	'reach : pickd swap'
	// x y quot -> quot(x,y) y
	'keep : over ( call ) dip'

	// primitive ops
	'<< : ( dup len ) dip nth!'
	// put top N items in stack into a new list
	'list : [ ] swap <<'
	'list2 : ( list ) dip <<'
	'list3 : ( list2 ) dip <<'
	'list4 : ( list3 ) dip <<'
	'list5 : ( list4 ) dip <<'

	// combinators
	'if : ? call'
	'when : ( ) if'
	'unless : ( ) swap if'
	'twice : dup ( call ) dip call'
	'thrice : dup dup ( call ) dip2 ( call ) dip call'
	'bi : ( keep ) dip call'
	'tri : ( ( keep ) dip keep ) dip call'
	'quad : ( ( ( keep ) dip keep ) dip keep ) dip call'

	// sequencers
	// [x..] -> bool
	'empty? : len zero?'
	// n quot: ( i -> _ ) -> _
	'(each-integer) : pick pick > ( rot ( dup2 ( call ) dip2 ) dip -rot ( ++ ) dip (each-integer) ) ( drop3 ) if'
	// Takes a number N and a quotation and calls the quotation N times, each
	// time with the iteration count counting up from 0
	'each-integer : 0 swap (each-integer)'
	// [x..] quot: ( x -> _ ) -> _
	'each : ( dup len ) dip swap ( swap ( dupd nth ) dip tuck call ) each-integer drop2'
	// [x..] quot: ( acc x -> acc ) acc -> acc
	'reduce : -rot ( dup len ) dip swap ( swap ( dupd nth ) dip ( swap ) dip2 dup ( call ) dip swapd ) each-integer drop2'
	// [x..] quot: ( x -> y ) -> [y..]
	'map : [ ] -rot ( dup len ) dip swap ( swap ( dupd nth ) dip ( swap ) dip2 dup ( call << swap ) dip ) each-integer drop2'
	// [x..] quot: ( x -> bool ) -> [x..]
	'filter : [ ] -rot ( dup len ) dip swap ( swap ( dupd nth ) dip ( swap ) dip2 dup ( dupd call ( << ) ( drop ) if swap ) dip ) each-integer drop2'
	// [x..] a b [y..] -> [y.. x..]
	'(slice) : pick pick < ( reach reach nth << ( ++ ) dip2 (slice) ) ( -rot4 drop3 ) if'
	// [x..] a b -> [x..]
	'slice : [ ] (slice)'
	// [x..] -> sum
	'sum : ( + ) 0 reduce'
	// [x..] -> prod
	'prod : ( * ) 1 reduce'

	// stdlib
	// c [x..] a b -> c [x.. a] a+=c b
	'(push-into-list-and-incr) : dupd ( << ) dip2 ( pick + ) dip'
	// c [x..] a b -> [x..b:c]
	'(iterate-if-less) : dup2 < ( (push-into-list-and-incr) (iterate-if-less) ) ( drop2 nip ) if'
	// a b c -> [a..b:c]
	'a..b:c : -rot [ ] -rot (iterate-if-less)'
	// a b -> [a..b:1]
	'a..b : 1 a..b:c'
	'0..b : 0 swap a..b'
	'1..b : 1 swap a..b'
	// n -> [1,n)
	'seq : 0..b'
	// n -> [1,n]
	'nat : ++ 1..b'
] |> with each() fn(stmt) stmt |> parse() |> eval(stack, scope)

Help := 'Xi is a minimal stack-based concatenative stack language.

Usage
	./xi.oak --help OR -h
	        Show this help message
	./xi.oak
	        Start an interactive REPL
	./xi.oak <filename>
	        Run a Xi program from a source file

See also: github.com/thesephist/xi
'

Cli := cli.parse()
if [Cli.opts.help, Cli.opts.h] {
	[true, _], [_, true] -> println(Help)
	_ -> if filePath := Cli.verb {
		// run as REPL
		? -> with loop() fn(_, break) {
			print('xi) ')
			evt := input()
			if evt.type {
				:error -> break()
				_ -> if program := evt.data |> trim() {
					'exit' -> break()
					_ -> program |> parse() |> eval(stack, scope)
				}
			}
		}
		// run from file
		_ -> with fs.readFile(filePath) fn(file) if file {
			? -> printf('Could not read file "{{0}}"\n', filePath)
			_ -> file |> split('\n') |> with each() fn(line) {
				line |> parse() |> eval(stack, scope)
			}
		}
	}
}

